<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myshopping.mapper.ProductMapper">
	
	<select id="getList" resultType="com.myshopping.domain.ProductVO">
	<![CDATA[
		select * from tbl_product where product_code > 0 order by product_code desc
	]]>
	</select>
	
	<select id="getListWithPaging" resultType="com.myshopping.domain.ProductVO">
		<![CDATA[
			select
				* 
				from 
					(select /*+ INDEX_DESC(tbl_product pk_product)*/
						rownum rn, product_code, product_ctgr, product_name, 
						product_price, product_explain, product_stock, product_sales, product_regdate
						from tbl_product
						where rownum <= #{pageNum} * #{amount}
					)
					where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	<insert id="insert">
		insert into tbl_product (PRODUCT_CODE, PRODUCT_CTGR, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_EXPLAIN, PRODUCT_STOCK, PRODUCT_SALES)
		values (seq_product.nextval, #{product_ctgr}, #{product_name}, #{product_price}, #{product_explain}, #{product_stock}, #{product_sales})
	</insert>
	
	<insert id="insertSelectKey">
		<selectKey keyProperty="product_code" order="BEFORE"
			resultType="long">
			select seq_product.nextval from dual	
		</selectKey>
		insert into tbl_product (PRODUCT_CODE, PRODUCT_CTGR, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_EXPLAIN, PRODUCT_STOCK, PRODUCT_SALES)
		values (#{product_code}, #{product_ctgr}, #{product_name}, #{product_price}, #{product_explain}, #{product_stock}, #{product_sales})
	</insert>
	
	<resultMap type="com.myshopping.domain.ProductVO" id="productMap">
		<id property="product_code" column="product_code"/>
		<result property="product_code" column="product_code"/>
		<result property="product_ctgr" column="product_ctgr"/>
		<result property="product_name" column="product_name"/>
		<result property="product_price" column="product_price"/>
		<result property="product_explain" column="product_explain"/>
		<result property="product_stock" column="product_stock"/>
		<result property="product_sales" column="product_sales"/>
		<collection property="imageList" resultMap="imageMap">
		</collection>
	</resultMap>
	
	<resultMap type="com.myshopping.domain.ProductImageVO" id="imageMap">
		<result property="uuid" column="uuid"/>
		<result property="uploadPath" column="uploadPath"/>
		<result property="fileName" column="fileName"/>
		<result property="fileType" column="filetype"/>
		<result property="product_code" column="product_code"/>
	</resultMap>
	
	<select id="read" resultMap="productMap">
		select * 
			from (select 
				rownum rn, tp.product_code, tp.product_ctgr, tp.product_name, 
				tp.product_price, tp.product_explain, tp.product_stock, tp.product_sales, tp.product_regdate,
				tpi.uuid, tpi.uploadPath, tpi.fileName, tpi.filetype
				from tbl_product tp
				LEFT OUTER JOIN tbl_product_image tpi
				ON tp.product_code = tpi.product_code
				where tp.product_code = #{product_code})
	</select>
	
	<select id="readCategori" resultMap="productMap" parameterType="map">
		<![CDATA[
		select *
		from (select 
				rownum rn, tp.product_code, tp.product_ctgr, tp.product_name, 
				tp.product_price, tp.product_explain, tp.product_stock, tp.product_sales, tp.product_regdate,
				tpi.uuid, tpi.uploadPath, tpi.fileName, tpi.filetype
				from tbl_product tp
				LEFT OUTER JOIN tbl_product_image tpi
				ON tp.product_code = tpi.product_code 
				where product_ctgr = #{product_ctgr} AND rownum <= (#{cri.pageNum} * #{cri.amount})
			)
		where rn > (#{cri.pageNum} - 1) * #{cri.amount}
		]]>
		<choose>
			<when test="cri.type == 'sortPriceD'">
				order by product_price asc
			</when>
			<when test="cri.type == 'sortPriceU'">
				order by product_price desc
			</when>
			<when test="cri.type == 'sortName'">
				order by product_name asc
			</when>
			<otherwise>
				order by product_code desc
			</otherwise>
		</choose>
		<![CDATA[
		]]>
	</select>
	
	
	<select id="search" resultMap="productMap">
		<![CDATA[
		select *
			from ( select rownum rn, tp.product_code, tp.product_ctgr, tp.product_name, 
				tp.product_price, tp.product_explain, tp.product_stock, tp.product_sales, tp.product_regdate,
				tpi.uuid, tpi.uploadPath, tpi.fileName, tpi.filetype
				from tbl_product tp
				LEFT OUTER JOIN tbl_product_image tpi
				ON tp.product_code = tpi.product_code
				where (product_name like '%'||#{product_name}||'%' or product_ctgr like '%'||#{product_name}||'%')
				AND rownum <= (#{cri.pageNum} * #{cri.amount})
				)
			where rn > (#{cri.pageNum} - 1) * #{cri.amount}	
		]]>
	</select>
	
	
	<select id="readBestProduct" resultMap="productMap">
		<![CDATA[
		SELECT * 
			FROM 
				(select 
					rownum rn, tp.product_code, tp.product_ctgr, tp.product_name, 
					tp.product_price, tp.product_explain, tp.product_stock, tp.product_sales, tp.product_regdate,
					tpi.uuid, tpi.uploadPath, tpi.fileName, tpi.filetype
					from tbl_product tp
					LEFT OUTER JOIN tbl_product_image tpi
					ON tp.product_code = tpi.product_code 
					where product_ctgr = #{product_ctgr}
					ORDER BY PRODUCT_SALES DESC) 
			WHERE ROWNUM <= 5
		]]>
	</select>
	
	<select id="readBestProductHome" resultMap="productMap">
		<![CDATA[
		SELECT * FROM 
			(SELECT * FROM 
				TBL_PRODUCT tp
				LEFT OUTER JOIN tbl_product_image tpi
				ON tp.product_code = tpi.product_code
				ORDER BY PRODUCT_SALES DESC) 
			WHERE ROWNUM <= 5
		]]>
	</select>
	
	<delete id="delete">
		delete from tbl_product where product_code = #{product_code}
	</delete>
	
	<update id="update">
		update tbl_product
		set PRODUCT_CTGR = #{product_ctgr},
		PRODUCT_NAME = #{product_name},
		PRODUCT_PRICE = #{product_price},
		PRODUCT_EXPLAIN = #{product_explain},
		PRODUCT_STOCK = #{product_stock},
		PRODUCT_SALES = #{product_sales}
		where product_code = #{product_code}
	</update>
	
	<update id="updateProductStock" parameterType="com.myshopping.domain.OrderProductVO">
		update tbl_product
		set product_stock = product_stock - #{order_product_stock}
		where product_code = #{product_code}
	</update>
	
	<update id="updateProductSales" parameterType="com.myshopping.domain.OrderProductVO">
		update tbl_product
		set product_sales = product_sales + #{order_product_stock}
		where product_code = #{product_code}
	</update>
	
	<select id="getTotalCount" resultType="int">
		select count(*) from tbl_product where product_ctgr = #{product_ctgr}
	</select>
	
	<select id="getSearchCount" resultType="int">
		select count(*) from tbl_product where (product_ctgr like '%'||#{product_name}||'%' or product_name like '%'||#{product_name}||'%')
	</select>
	
</mapper>